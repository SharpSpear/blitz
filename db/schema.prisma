// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum UserStatus {
  PENDING
  VERIFIED
}

model User {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  firstName      String
  lastName       String
  email          String      @unique
  hashedPassword String?
  role           String      @default("USER")
  avatar         FileUpload? @relation(fields: [avatarId], references: [id])
  avatarId       String?
  onboarded      Boolean?    @default(false)
  status         UserStatus?
  verifiedAt     DateTime?

  tokens      Token[]
  sessions    Session[]
  memberships Membership[]
  prospect    Prospect[]
  records     Record[]
  plan        Plan?        @default(FREE)
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  // type        String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql

enum TokenType {
  RESET_PASSWORD
  INVITE_TOKEN
  ACCESS_TOKEN
  EMAIL_VERIFICATION_TOKEN
}

model Workspace {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())

  name String
  slug String @unique

  memberships Membership[]

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  user   User @relation(fields: [userId], references: [id])
  userId Int
  @@unique([userId, workspaceId])
}

enum ProspectRole {
  OWNER
  VIEWER_PUBLIC_ONLY
  VIEWER_PRIVATE
}

model Party {
  id        Int        @id @default(autoincrement())
  partyName String     @unique
  partyLogo String     @default("")
  members   Prospect[]
}

model Prospect {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  name            String
  slug            String       @unique
  owner           User?        @relation(fields: [ownerId], references: [id])
  ownerId         Int?
  url             String?
  party           Party?       @relation(fields: [partyId], references: [id])
  partyId         Int?
  isPublic        Boolean      @default(false)
  twitterHandle   String
  linkedinHandle  String
  facebookHandle  String
  instagramHandle String
  records         Record[]
  role            ProspectRole
  imageUrl        String       @default("")
  isClaimed       Boolean?     @default(true)
  votable         Boolean      @default(false)
  votes           Int[]
}

model Record {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isPublic    Boolean    @default(true)
  privateDesc String
  publicDesc  String
  type        ChangeType @default(TRACKRECORD)
  prospect    Prospect   @relation(fields: [prospectId], references: [id])
  prospectId  Int
  owner       User?      @relation(fields: [ownerId], references: [id])
  ownerId     Int?
  date        DateTime
  imageUrl    String     @default("")
}

enum ChangeType {
  PROJECT
  TRACKRECORD
  PERSONAL
  NEWS
  EDUCATION
}

model FileUpload {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())

  type String
  dir  String
  path String
  User User[]
}

enum Plan {
  FREE
  STARTUP
  ENTERPRISE
}
